package main

import (
	"fmt"
	"time"

	"github.com/USA-RedDragon/dmrgo/dmr/enums"
	"github.com/USA-RedDragon/dmrgo/dmr/layer2"
)

// Create a static array with a length of 7 whose contents are arrays of 33 bytes
const (
	DMR_BURST_SIZE  = 33
	DMR_BURST_COUNT = 15
)

var EXAMPLE_DMR_BURSTS = [DMR_BURST_COUNT][DMR_BURST_SIZE]byte{
	{68, 75, 3, 135, 36, 66, 12, 240, 21, 240, 12, 161, 196, 109, 255, 87, 215, 93, 245, 222, 49, 168, 53, 24, 63, 48, 61, 97, 56, 82, 151, 134, 91},           // First, burst
	{226, 215, 161, 39, 49, 45, 130, 32, 35, 149, 235, 131, 64, 119, 85, 253, 125, 247, 95, 119, 31, 222, 238, 242, 236, 188, 129, 84, 44, 58, 1, 190, 69},     // Second, burst
	{142, 252, 230, 48, 43, 37, 196, 158, 153, 140, 252, 165, 18, 97, 48, 0, 1, 16, 153, 18, 168, 64, 6, 183, 238, 188, 227, 114, 32, 167, 133, 66, 59},        // A
	{252, 156, 192, 116, 102, 163, 208, 66, 25, 222, 190, 192, 80, 33, 112, 241, 41, 105, 103, 70, 195, 132, 82, 59, 248, 184, 197, 20, 100, 43, 196, 30, 243}, // B
	{216, 184, 197, 54, 100, 15, 144, 30, 243, 234, 186, 197, 118, 65, 112, 144, 195, 89, 87, 66, 15, 208, 28, 195, 250, 152, 229, 118, 38, 11, 144, 28, 211},  // C
	{250, 152, 229, 118, 38, 11, 128, 30, 209, 234, 152, 229, 118, 33, 88, 74, 162, 186, 80, 118, 27, 144, 28, 195, 232, 184, 197, 20, 100, 59, 196, 12, 211},  // D
	{234, 152, 229, 118, 38, 27, 144, 30, 227, 234, 152, 229, 118, 33, 16, 0, 0, 0, 14, 38, 27, 144, 30, 243, 234, 154, 199, 118, 32, 90, 212, 30, 209},        // E
	{234, 152, 229, 118, 38, 26, 144, 30, 209, 234, 186, 197, 118, 71, 85, 253, 125, 247, 95, 114, 31, 208, 30, 209, 234, 152, 229, 118, 38, 24, 145, 62, 209}, // F
	{234, 152, 229, 118, 38, 26, 144, 30, 209, 234, 186, 197, 118, 71, 85, 253, 125, 247, 95, 114, 31, 208, 30, 209, 234, 152, 229, 118, 38, 24, 145, 62, 209}, // Burst
	{202, 152, 199, 86, 7, 41, 129, 62, 213, 216, 186, 231, 54, 97, 48, 0, 1, 16, 153, 18, 95, 196, 62, 209, 200, 186, 231, 54, 98, 93, 213, 62, 209},          // A
	{204, 156, 224, 48, 66, 165, 209, 114, 29, 204, 156, 224, 48, 65, 112, 241, 41, 105, 103, 66, 181, 193, 98, 13, 228, 37, 220, 235, 18, 27, 153, 201, 9},    // B
	{191, 102, 135, 229, 219, 137, 224, 95, 238, 83, 96, 152, 66, 81, 112, 144, 195, 89, 87, 69, 45, 93, 209, 213, 222, 229, 130, 113, 48, 16, 26, 192, 186},   // C
	{142, 222, 212, 22, 41, 113, 211, 175, 158, 140, 222, 133, 86, 97, 88, 74, 162, 186, 80, 113, 249, 7, 99, 147, 140, 222, 133, 86, 97, 249, 7, 97, 147},     // D
	{140, 222, 133, 86, 97, 249, 22, 65, 147, 140, 222, 132, 86, 97, 16, 0, 0, 0, 14, 33, 233, 22, 65, 146, 142, 254, 164, 82, 99, 153, 49, 97, 146},           // E
	{68, 36, 3, 83, 36, 242, 12, 136, 21, 128, 12, 1, 196, 173, 255, 87, 215, 93, 245, 217, 100, 188, 54, 32, 56, 80, 49, 33, 48, 82, 142, 134, 104},           // F
}

func main() {
	var voiceData []byte
	voiceData = append(voiceData, []byte(".amb")...)
	for _, rawBurst := range EXAMPLE_DMR_BURSTS {
		timeStarted := time.Now()
		burst := layer2.NewBurstFromBytes(rawBurst)
		timeElapsed := time.Since(timeStarted)
		if !burst.IsData {
			for _, frame := range burst.VoiceData.Frames {
				// We create 8 bytes in this loop
				// Byte 1 - always 0
				voiceData = append(voiceData, 0x00)

				// Bytes 2-7 are the first 48 bits of voice data
				voiceFrames := make([]byte, 6)
				for j := 0; j < 6; j++ {
					for k := 0; k < 7; k++ {
						voiceFrames[j] |= frame.DecodedBits[j*7+k] << uint(6-k)
					}
				}
				voiceData = append(voiceData, voiceFrames...)

				// Byte 8 is the 49th bit of voice data
				voiceData = append(voiceData, frame.DecodedBits[48])
			}
		}
		fmt.Printf("%s: %v\n", enums.SyncPatternToName(burst.SyncPattern), burst.ToString())
		fmt.Printf("Took %s to decode burst\n", timeElapsed)
	}
	fmt.Printf("Voice data: %x\n", voiceData)
}
